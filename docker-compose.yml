version: '3.8'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.1-python3.10
  environment:
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
    - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
    - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    - "PIP_ADDITIONAL_PACKAGES=apache-airflow-providers-http apache-airflow-providers-amazon apache-airflow-providers-mongo pymongo kafka-python requests boto3 pandas pyarrow"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./data:/opt/airflow/data
    - ./scripts:/opt/airflow/scripts
    - ./.env:/opt/airflow/.env
  networks:
    - crypto_network
  depends_on:
    - postgres-airflow

services:
  # ----------------- AIRFLOW SERVICES -----------------
  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    depends_on:
      postgres-airflow:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
      - ./.env:/opt/airflow/.env
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    depends_on:
      airflow-webserver:
        condition: service_healthy
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash -c
    command:
      - |
        mkdir -p /opt/airflow/data/raw /opt/airflow/data/processed /opt/airflow/data/logs
        chown -R airflow:airflow /opt/airflow/data
        airflow db init
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@crypto-pipeline.com --password admin
    depends_on:
      postgres-airflow:
        condition: service_healthy

  # ----------------- NIFI SERVICE -----------------
  nifi:
    image: apache/nifi:1.25.0
    container_name: nifi
    ports:
      - "8443:8443"
    environment:
      - NIFI_WEB_HTTPS_PORT=8443
      - SINGLE_USER_CREDENTIALS_USERNAME=nifi
      - SINGLE_USER_CREDENTIALS_PASSWORD=nifipassword
      - NIFI_WEB_PROXY_HOST=nifi:8443
      - NIFI_SENSITIVE_PROPS_KEY=nifipassword
    volumes:
      - ./nifi_data/input:/opt/nifi/input_data
      - ./nifi_data/drivers:/opt/nifi/drivers
      - ./nifi_data/database_repository:/opt/nifi/nifi-current/database_repository
      - ./nifi_data/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./nifi_data/content_repository:/opt/nifi/nifi-current/content_repository
      - ./nifi_data/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./nifi_data/conf:/opt/nifi/nifi-current/conf
      - ./nifi_data/logs:/opt/nifi/nifi-current/logs
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "curl", "-k", "--fail", "https://localhost:8443/nifi-api/system-diagnostics"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s

  # ----------------- KAFKA & ZOOKEEPER -----------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ----------------- MONGODB -----------------
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: crypto_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ----------------- MONITORING -----------------
  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-mongodb-datasource,simplejson-datasource,grafana-clock-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/crypto-pipeline-dashboard.json
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - crypto_network
    depends_on:
      - prometheus
      - mongodb
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ----------------- ENHANCED PROMETHEUS FOR MVP -----------------
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - crypto_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ----------------- MONGODB EXPORTER FOR METRICS -----------------
  mongodb-exporter:
    image: percona/mongodb_exporter:0.40.0
    container_name: mongodb-exporter
    environment:
      - MONGODB_URI=mongodb://crypto_user:crypto_password@mongodb:27017/crypto_db
    ports:
      - "9216:9216"
    networks:
      - crypto_network
    depends_on:
      - mongodb
    command:
      - '--mongodb.uri=mongodb://crypto_user:crypto_password@mongodb:27017/crypto_db'
      - '--collect-all'
      - '--compatible-mode'

  # ----------------- NODE EXPORTER FOR SYSTEM METRICS -----------------
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - crypto_network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # ----------------- CADVISOR FOR CONTAINER METRICS -----------------
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - crypto_network
    privileged: true
    devices:
      - /dev/kmsg


  # ----------------- KAFKA MANAGEMENT -----------------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - crypto_network

  # ----------------- LEGACY DATA SOURCES (Optional) -----------------
  postgres-source:
    image: postgres:13
    container_name: postgres-source
    environment:
      - POSTGRES_USER=source_user
      - POSTGRES_PASSWORD=source_password
      - POSTGRES_DB=source_db
    ports:
      - "5431:5432"
    volumes:
      - postgres_source_data:/var/lib/postgresql/data
    networks:
      - crypto_network

  mysql-source:
    image: mysql:8.0
    container_name: mysql-source
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=source_db
      - MYSQL_USER=source_user
      - MYSQL_PASSWORD=source_password
    ports:
      - "3308:3306"
    volumes:
      - mysql_source_data:/var/lib/mysql
    networks:
      - crypto_network

volumes:
  postgres_airflow_data:
  postgres_source_data:
  mysql_source_data:
  mongodb_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:

networks:
  crypto_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16